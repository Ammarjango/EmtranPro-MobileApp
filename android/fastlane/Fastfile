PACKAGE_NAME = "com.emtranpro"

before_all do
  KEYSTORE_PATH = Dir.pwd + "/../app/EmTranPro.keystore"
  KEYSTORE_PASSWORD = ENV["KEYSTORE_PASSWORD"]
  KEY_ALIAS = ENV["KEY_ALIAS"]
  KEY_PASSWORD = ENV["KEY_PASSWORD"]
  # PLAYSTORE_KEY_PATH = Dir.pwd + "/../google-play-api.json"
end

def fetch_current_version_from_gradle_file
  build_gradle_content = File.read(Dir.pwd + "/../app/build.gradle")
  match_data = build_gradle_content.match(/versionCode (\d+)/)
  match_data[1].to_i if match_data
end

def increment_version_code_in_gradle_file(new_version_code)
  build_gradle_content = File.read(Dir.pwd + "/../app/build.gradle")
  build_gradle_content.gsub!(/versionCode (\d+)/, "versionCode #{new_version_code}")
  File.write(Dir.pwd + "/../app/build.gradle", build_gradle_content)
end

default_platform(:android)

platform :android do
  lane :build_and_distribute do |options|
    current_version_in_gradle = fetch_current_version_from_gradle_file

    incremented_version_code = current_version_in_gradle + 1

    increment_version_code_in_gradle_file(incremented_version_code)
		
		gradle(task: "clean")

    gradle(
      task: "assembleRelease",
      properties: {
        "android.injected.signing.store.file" => KEYSTORE_PATH,
        "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["KEY_PASSWORD"],
      }
    )

    apk_file_path = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    UI.user_error!("Could not find the .apk file") unless apk_file_path

    ENV["APK_FILE_PATH"] = apk_file_path

    # Print the APK file path for debugging
    UI.important("Generated .apk file path: #{apk_file_path}")
  end
end
